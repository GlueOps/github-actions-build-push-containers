name: "Build Docker Image and Push to GHCR"
author: "@GlueOps"
description: "Abstracts defining actions to push Docker images to ghcr.io"
branding:
  icon: 'box'
  color: 'yellow'

inputs:
  github_token: 
     description: "Personal Access Token (PAT) used to authenticate with the GitHub Container Registry."
     required: true
     default: ${{ github.token }}

  image_name:
    description: 'Docker image is named after repository'
    required: true
    default: ${{ github.repository }} 

  dockerfile-path:
    description: 'path to the Dockerfile'
    required: true
    default: "Dockerfile"

  context:
    description: "A path to the context in which the build will happen, see https://docs.docker.com/engine/reference/commandline/build/"
    required: false
    default: "."

  registry:
    description: 'The container registry to push the image to'
    required: true
    default: "ghcr.io"
  
  registry-username:
    description: 'The username for authentication to the container registry (defaults to the github.actor)'
    required: false
  
  tags:
    description: 'The tags to assign to the Docker image'
    required: false

runs:
  using: "composite"
  steps:
    # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry
    - name: Log in to the Container registry
      shell: bash
      env:
        DOCKER_BUILDKIT: '1'
        DOCKER_IO_USER: ${{ inputs.registry-username }}
        IMAGE_NAME: ${{ inputs.image_name }}

      run: |
        echo "::group::Cloning target ref..."
        # initial ref is branch
        export TARGET_REF="${GITHUB_REF#refs/heads/}"
        # if tag, replace branch with tag
        export TARGET_REF="${TARGET_REF#refs/tags/}"
        echo "Current ref is: $TARGET_REF"
      
        git clone --depth=1 --branch="$TARGET_REF" "https://${{ github.actor }}:${{ github.token }}@github.com/${{ github.repository }}" .
        echo "Using $(docker -v)"
        echo "::endgroup::"
        
        if [ -z "${DOCKER_IO_USER}" ]; then
          export DOCKER_IO_USER="${{ github.actor }}"
        fi
        echo "Your username is ${DOCKER_IO_USER}"

        echo "::group::Logging into the GitHub Container registry ..."
        echo "${{ github.token }}" | docker login ${{ inputs.registry }} -u ${{ github.actor }} --password-stdin
        echo "::endgroup::"

        echo "::group::Set commit tags"
        echo "Event payload: ${{ toJson(github.event_name) }}"

        # Clean up TARGET_REF for invalid characters
        TARGET_REF=${TARGET_REF////-}      # Replace slashes with hyphens
        TARGET_REF=${TARGET_REF//[^a-zA-Z0-9_.-]/_}   # Replace invalid characters with underscores
        TARGET_REF=${TARGET_REF// /_}      # Replace whitespaces with underscores
        TARGET_REF=${TARGET_REF,,}         # Convert to lowercase
        export TARGET_REF="$TARGET_REF"
        export SHA="${{ github.sha }}"
        export SHORT_SHA="${SHA:0:7}"

        echo "Target Ref: ${TARGET_REF}"
        echo "Short SHA: ${SHORT_SHA}"
        echo "Long SHA: ${SHA}"

        # convert the image name to lowercase
        export IMAGE_NAME=$(echo "${IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
        echo "::endgroup::"

        export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        export GITHUB_URL=https://github.com/${{ github.repository }}

        echo "::group::Building the Docker image as ${{ inputs.registry }}/${IMAGE_NAME}:${TARGET_REF} from ${{ inputs.dockerfile }} in ${{ inputs.context }} context ..."
        docker build \
          --file "${{ inputs.dockerfile }}" \
          --cache-from "${{ inputs.registry }}/${IMAGE_NAME}:latest" \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg BUILD_DATE="${BUILD_DATE}" \
          --build-arg GITHUB_SHA="${GITHUB_SHA}" \
          -t "${{ inputs.registry }}/${IMAGE_NAME}:${TARGET_REF}" \
          -t "${{ inputs.registry }}/${IMAGE_NAME}:${SHORT_SHA}" \
          -t "${{ inputs.registry }}/${IMAGE_NAME}:${SHA}" \
          --label "org.label-schema.build-date=${BUILD_DATE}" \
          --label "org.label-schema.vcs-url=${GITHUB_URL}" \
          --label "org.label-schema.vcs-ref=${GITHUB_SHA}" \
          --label "org.opencontainers.image.created=${BUILD_DATE}" \
          --label "org.opencontainers.image.source=${GITHUB_URL}" \
          --label "org.opencontainers.image.revision=${GITHUB_SHA}" \
          "${{ inputs.context }}"

        echo "::endgroup::"

        echo "::group::Inspecting the image ..."
        docker image ls

        echo "Labels:"
        docker image inspect "${{ inputs.registry }}/${IMAGE_NAME}:${TARGET_REF}" | jq '.[].Config.Labels'

        echo "Env variables:"
        docker image inspect "${{ inputs.registry }}/${IMAGE_NAME}:${TARGET_REF}" | jq '.[].Config.Env'

        echo "::endgroup::"

        echo "::group::Pushing the image to ${{ inputs.registry }} ..."
        docker push --all-tags "${{ inputs.registry }}/${IMAGE_NAME}" && echo "Pushed"
        echo "::endgroup::"
